<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<h3>Notes</h3>
<ul>
<li>Conceptually, a bundle is a list of resources with some context (named links, and status on the entries)</li>
<li>Since a Bundle is itself a <a href="resource.html">Resource</a> it has the same common metadata as all resources, including profile assertions, tags, and security labels</li>
<li>Both bundle.link and Bundle.entry.link are defined to support providing additional context when bundles are used (e.g. <a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>). 
  Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was <a href="http.html#read">read</a> directly.
  This specification defines some specific uses of Bundle.link for <a href="search.html#conformance">searching</a> and <a href="http.html#paging">paging</a>, but no specific uses for Bundle.entry.link, and no defined function in a transaction. Meaning is implementation specific</li>
</ul>

<a name="using"> </a>

<h3>Using Bundles</h3>

<p>
The content and rules for using a Bundle depend on the <a href="bundle-definitions.html#Bundle.type">type</a> of the bundle. 
Note that all bundle types use Bundle.base and Bundle.entry.base for 
identity resolution as described below.
</p>

<a name="document"> </a>
<h4>Document</h4>

<p>
A document bundle (type = "document") consists of a series of 
entries, the first of which is a <a href="composition.html">Composition</a>. 
Each entry element SHALL contain a resource. See <a href="documents.html">Documents</a>
for further information.
</p>

<p><a href="document-example-dischargesummary.html">Example</a></p>

<a name="message"> </a>
<h4>Message</h4>

<p>
A message bundle (type = "message") consists of a series of 
entries, the first of which is a <a href="messageheader.html">MessageHeader</a>. 
Each entry element SHALL contain a resource. See <a href="messaging.html">Messaging</a>
for further information.
</p>

<p><!--<a href="query-example-request.html">Example</a>-->Example: todo</p>

<a name="searchset"> </a>
<h4>Search Results</h4>

<p>
A set of search results (type = "searchset") consists of a series of 
0 or more entries. Each entry element SHALL contain a resource. See <a href="http.html#search">Search</a>
for further information.
</p>
<p>
In addition, <a href="bundle-definitions.html#Bundle.total">Bundle.total</a> may be 
used to return the total number of resources that match the search, and that may be 
returned by following the "next" <a href="bundle-definitions.html#Bundle.link">link</a>.
</p>
<p>
For each entry, a search set can also contain two specific pieces of search related
information:
</p>
<ul>
 <li><a href="bundle-definitions.html#Bundle.entry.search.mode">search.mode</a>: An indication of whether the resource is in the search set because it matched the search criteria, or whether it is included because another resource refers to it (e.g. by the <a href="search.html#include">_include</a> parameter)</li>
 <li><a href="bundle-definitions.html#Bundle.entry.search.score">search.score</a>: The server's search ranking score for the entry. Servers are not required to return a ranking score, but if they do, 1 is most relevant, and 0 is least relevant. Note: often, search results are sorted by score, but the client may specify a different sort order (see <a href="search.html#score">Search Relevance</a></li>
</ul>

<p><a href="bundle-example.html">Example</a></p>

<a name="history"> </a>
<h4>History</h4>

<p>
An update history (type = "history") consists of a series of 
0 or more entries. Each entry element SHALL contain a transaction element that describes the change
that was made, and, if the method is a POST or PUT, a resource that represents the state of the 
resource at the conclusion of the operation. 
See <a href="http.html#history">History</a> for further information.
</p>
<p>
In addition, <a href="bundle-definitions.html#Bundle.total">Bundle.total</a> may be 
used to return the total number of resources that are included in the update history, 
and that may be returned by following the "next" <a href="bundle-definitions.html#Bundle.link">link</a>.
</p>4

<p>Example to do</p>

<a name="transaction"> </a>
<h4>Transaction</h4>

<p>
A transaction (type = "transaction") consists of a series of 0 or more entries. Each entry element 
SHALL contain either a transaction element, or a resource element (or both). See <a href="http.html#transaction">Transactions</a> 
for further information. Each entry in a transaction has the details of an HTTP operation that informs the system 
processing the transaction what to do with the entry. If the entry method is a 'PUT' or 
'POST', then the entry SHALL contain a resource that becomes the body of the HTTP operation. 
</p>
<p>
If there is no <code>transaction</code> element, then there SHALL be a resource and the server must 
infer whether this is a create or an update from from the resource identity supplied.
</p>

<p><a href="bundle-transaction.html">Example</a></p>

<a name="transaction-response"> </a>
<h4>Transaction Response</h4>

<p>
A transaction response (type = "transaction-response") consists of a series of 
0 or more entries, 1 for each entry in the transaction it is in response to. 
Each entry element SHALL contain a <code>transactionResponse</code> element which indicates 
the outcome of the HTTP operation that the server performed for the entry. 
</p>

<p><a href="bundle-response.html">Example</a></p>

<a name="collection"> </a>
<h4>Collection</h4>

<p>
A collection (type = "collection") consists of a series of 
0 or more entries. No particular use with respect to the FHIR specification is associated with this bundle.
Each entry element SHALL contain a resource.
</p>

<p><a href="diagnosticreport-examples.html">Example</a></p>


<a name="resolving"> </a>
<a name="references"> </a>
<h3>Resolving references in Bundles</h3>

<p>
The <code>Bundle</code> resource is a packaging construct that has one of more entries that 
are other kinds of resources. Those resources themselves have references to other resources - e.g. 
an Observation that refers to a Patient. The referenced resources may also be found
in the bundle. For example, the system that constructed the bundle may have included both
the observation and the patient. The content of the references between resources doesn't 
change because of the Bundle.
</p>
<p>
This section documents a method that resolves references correctly within a bundle. Note
that this method does not define any new semantics; resolution is based on the way
resource identity and resource references work.
</p>
<p>
Applications reading a bundle should always <a href="references.html#bundle-refs">look for a resource</a> 
by its identity in the bundle first before trying to access it by its URL.
</p>
<p>
How to resolve a reference in a bundle depends on the kind of reference, and the 
context in which it is found:
</p>
<ul>
 <li><b>Reference is an absolute URI</b> (e.g. http://example.org/fhir/Patient/1 or urn:uuid:77c0b7fe-9929-40e9-b7a0-a10b0a512c46): 
  <ul>
	  <li>Look for an entry with a fullUrl that contains the URL in the reference</li>
	</ul>
	  
 </li>
 <li><b>Reference is an relative URI, entry has a matching fullUrl</b> (e.g. resource is an Observation with id = 123, fullUrl on the entry = http://example.org/fhir/Observation/123), reference = Patient/1, : 
  <ul>
	  <li>The target address is the base URL + reference (e.g. in the example given, http://example.org/fhir/Patient/1</li>
	  <li>Look for an entry with a fullUrl that contains the target</li>
	</ul>
 </li>
 <li><b>Reference is an relative URI, entry has a non-matching fullUrl</b> (eg. resource is an ValueSet with id = xxfd, fullUrl on the entry = http://example.org/cts/vs/2345) reference = 3452): 
  <ul>
	  <li>The target address is the URL with the tail removed + the reference (e.g. in the example given, http://example.org/cts/vs/3452)</li>
	  <li>Look for an entry with a fullUrl that contains the target</li>
	</ul>
 </li>
 <li><b>Reference is an relative URI, entry has no fullUrl</b> (eg. resource is a Condition with id = 2345, no fullUrl on the entry, reference = Patient/234): 
  <ul>
	  <li>Look through the bundle for a resource with no fullUrl, of the specified type, with the right id</li>
	  <li>Look for an entry with a fullUrl that contains the target</li>
	</ul>
 </li>
</ul> 
<p>
Rules for all cases:
</p>
<ul>
 <li>If no match is found, the resource is not in the bundle, and must be found elsewhere (e.g. if an http: URL, try accessing it directly)</li>
 <li>In any of these cases, if multiple matches are found, it is ambiguous which is correct. Bundles SHOULD not contain two resources with the same identity.</li>
 <li>References and fullUrls may be version specific. In that case, the same matching logic applies, but including the version as well</li>
 <li>Matching between resources/references with an without fullUrls is not safe, but may be done by trading partner agreement</li>
</ul>
<p>
Here is an example Bundle the demonstrates these rules:
</p>
<div class="example">
<pre class="xml">
&lt;Bundle xmlns=&quot;http://hl7.org/fhir&quot;&gt;
  &lt;type value=&quot;collection&quot;/&gt;

  &lt;!-- a simple entry, a patient with an id, and no fullUrl --&gt;
  &lt;entry&gt;
    &lt;resource&gt;
      &lt;Patient&gt;
         &lt;id value=&quot;23&quot;/&gt;
      &lt;/Patient&gt;
    &lt;/resource&gt;
  &lt;entry&gt;
	&lt;!-- a simple entry with a reference --&gt;
  &lt;entry&gt;
    &lt;resource&gt;
      &lt;Observation&gt;
         &lt;id value=&quot;123&quot;/&gt;
				 &lt;subject&gt;
				   &lt;!-- this is reference to the resource above --&gt;
				   &lt;reference value=&quot;Patient/1&quot;/&gt;
				 &lt;/subject&gt;
      &lt;/Organization&gt;
    &lt;/resource&gt;
  &lt;entry&gt;

  &lt;!-- an unidentified patient. This has no persistent 
    identifier, but it does have a UUID assigned for this bundle 	--&gt;
  &lt;entry&gt;
	  &lt;fullUrl value=&quot;urn:uuid:04121321-4af5-424c-a0e1-ed3aab1c349d&quot;/&gt;
    &lt;resource&gt;
      &lt;Patient&gt;
      &lt;/Patient&gt;
    &lt;/resource&gt;
  &lt;entry&gt;
	
  &lt;!-- An observation with a fullUrl --&gt;
  &lt;entry&gt;
	  &lt;fullUrl value=&quot;http://example.org/fhir/Observation/12&quot;/&gt;
    &lt;resource&gt;
      &lt;Observation&gt;
         &lt;id value=&quot;12&quot;/&gt;
				 &lt;subject&gt;
				   &lt;!-- this looks like a reference to the first entry, 
					   but it isn't automatically because there's no 
						 fullUrl on the first one, and we don't know whether
						 it's actually the same or not. Maybe it could be 
						 known to tbe true in a particular context. Because 
             of this, we recommend that implementers do not mix 
             entries with and without fullUrl in a single bundle --&gt;
				   &lt;reference value=&quot;Patient/1&quot;/&gt;
				 &lt;/subject&gt;
      &lt;/Observation&gt;
    &lt;/resource&gt;
  &lt;entry&gt;
	
  &lt;!-- A condition with a fullUrl --&gt;
  &lt;entry&gt;
	  &lt;fullUrl value=&quot;http://example.org/fhir/Condition/1234&quot;/&gt;
    &lt;resource&gt;
      &lt;Condition&gt;
         &lt;id value=&quot;1234&quot;/&gt;
				 &lt;patient&gt;
				    &lt;!-- reference to the unidentified patient --&gt;
				   &lt;reference value=&quot;urn:uuid:04121321-4af5-424c-a0e1-ed3aab1c349d&quot;/&gt;
				 &lt;/patient&gt;
				 &lt;evidence&gt;
				   &lt;detail&gt;
					   &lt;!-- This is a reference to the entry immediately above 
						   because the base are the same --&gt;
					   &lt;reference value=&quot;Observation/12&quot;/&gt;
					 &lt;/detail&gt;
				 &lt;/evidence&gt;
      &lt;/Condition&gt;
    &lt;/resource&gt;
  &lt;entry&gt;
&lt;/Bundle&gt;
</pre>
</div>

<!--</p>
<a name="bundle-refs"> </a>
<h3>Resolving references to Resources in Bundles</h3>
<p>
When processing bundles, applications should always search the resources in the
bundle first when a <a href="#Resource">resource reference</a> is encountered.
</p>
<div class="example">
<pre class="xml" fragment="Reference">
  &lt;institution&gt;
    &lt;reference value="Organization/23" /&gt;
  &lt;/institution&gt;
  &lt;institution&gt;
    &lt;reference value="Organization/ex/_history/2" /&gt;
  &lt;/institution&gt;
</pre>
</div>
<p>
then the application should look for any entry in the bundle where either the
entry.id matches the reference URL exactly:
</p>
<p>
In the second case, the match is based on a specific version of the
resource. Note that the matching is based on full URLs by prepending
the base for the entry (see <a href="bundle.html#resolving">"Bundles" for further information</a>).
If the resource reference cannot be resolved
in the bundle, the application SHOULD be able to retrieve the resource by
following the provided URL directly. If it can't, it will have to use some
other implementation-specific method for resolving how to find the resource.
</p>
<p>
If the resource reference is a absolute URL, the same basic principle
applies: attempt to resolve the reference in the bundle first, and then
look outside. However, before this can be done, the absolute URL must
be compared to the stated based URL, in <a href="bundle-definitions.html#Bundle.base">Bundle.base</a>;
if these do not match, the resource is not in the bundle. <i>todo-bundle: how to mix content?</i>
</p>

<p>
Note that the application SHOULD not assume that the base
service root is actually resolvable. In some circumstances, it will.
If the bundle has just been received from a server as a result of
a search or a history operation, the service root URL SHOULD match
the URL that the client used (it is allowed not to in order to
cater for proxies of various kinds). However in other
circumstances, where the bundle itself has been exchanged onwards
from the point of origin, and/or stored as an entity in its own
right (e.g. a <a href="documents.html">clinical document</a>) the
service root URL is merely a logical construct that holds within the
bundle when resolving resources, and will have no meaning outside
the bundle.
</p>
-->



</div>
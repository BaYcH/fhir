<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="compositions"></a>
<h2>Composition Rules</h2>

<p>
A value set can be a simple list of included codes, or it can be some kind of general selection criteria 
using the facilities provided by the code system. For these value sets:
</p>
<ul>
 <li>Multiple <code>include</code> statements are cumulative - e.g. the value set contains the union of all the includes</li>
 <li>Within an <code>include</code>, all the criterion apply -e.g. the value set contains the intersection of the criterion</li>
 <li>Within an <code>include</code>, a single system with selection criteria may be listed, and/or one or more value sets may be listed. Rules for
     interpretation:
    <ul>
     <li><b><code>System</code> only</b>: Codes are 'selected' for inclusion if they are selected by the code system selection (see next point)</li>
     <li><b><code>valueSet</code> only</b>: Codes are 'selected' for inclusion if they are in all the referenced value sets</li>
     <li><b><code>System</code> and <code>valueSet</code></b>: Codes are 'selected' for inclusion if they are selected by the code system selection and if they are in all the referenced value sets</li>
    </ul>
 </li>
 <li>If a system is specified, the following rules apply: 
    <ul>
     <li><b>no <code>concept</code> or <code>filter</code></b>: All codes in the system are included</li>
     <li><b><code>concept</code></b>: Only the enumerated codes are selected</li>
     <li><b><code>filter</code></b>: Any codes meeting the filter criteria are selected</li>
    </ul>
 </li>
 <li>If the system reference is not version specific and filters are present, then the contents of the value set are open and change 
    over time as the underlying code systems are updated</li>
 <li>The version reference may be the special value "<code>*</code>", which indicates that the value set includes codes from all versions of the code system.
     how to handle provision of the required versions and generation of expansions is at server discrection, including for poorly behaved code systems where 
		 a code changes in meaning). <br/><span class="warning">Implementer's Note: Use of this capability is subject to future clarification and conformance requirements based on implementation experience</span>.</li>
 <li>Using the property filters is only possible where the code system in use defines 
  the relevant properties. Note that in some cases the underlying code system defines the 
  logical concepts but not the syntax for exercising them. In such cases, the literal 
  definitions may be provided by a third party</li>
 <li>In addition to include rules, codes may be excluded. Rules for interpretation of exclude statements match those for includes, but codes in the exlude statements are never in the value set</li>
 <li>Value sets may include abstract codes - that is, codes designated by the underlying code system as 
   not for use as a selectable concept in a particular context. These abstract codes are typically used as a grouping/searching mechanism,
   and can be included either by enumerating them, or by using a filter.</li>
</ul>
<p>
When a value set enumerates codes, it is sometimes useful to define an alternative display for 
the code that is to be used wherever the value set is expanded and used in a UI. This 
facility is provided to cover the following circumstances:
</p>
<ul>
 <li>The system that defines the code or expression doesn't provide a display for this code (or any codes).</li>
 <li>The system that defines the code or expression defines multiple choices for display.</li>
 <li>The system provides a very long display name that is unnecessary or inappropriate in the context of this value set (e.g. a display name of "Glucose [Mass/volume] in Serum or Plasma --10 PM specimen" for LOINC code 48991-4, when the value set only includes Glucose mass/vol in serum/plasma codes). As the display names get longer, this becomes more important.</li>
</ul>
<p>
Note that care must be taken in order to avoid "changing the meaning" of the concept by
implying that it means something other than the explicit definition of the concept in the
underlying code system (e.g., in the case above, using a display of "Glucose Concentration at 10pm"). 
For this reason, some contexts of use do not allow a display to be associated with a specific code
in a value set.
</p>
<p>
Any display name for a concept provided in the value set is only used in the UI. The display in 
a <a href="datatypes.html#Coding">Coding</a> must be taken from the underlying code system definition, 
even if a value set is referenced explicitly in the Coding (e.g. by an extension). The alternative display 
specified in the value set would go in <a href="datatypes.html#CodeableConcept">CodeableConcept</a>.text, 
perhaps appended to the UI label for the matching data element.
</p>
 
<a name="multiples"></a>
<h2>Value Sets with multiple code systems</h2> 
<p>
Value sets may select codes from multiple code systems - either 
by including codes from different systems, or importing other 
value sets that include them. A typical use for crossing code systems is 
when including a set of codes, and adding a few additional codes to cover 
cases not catered to by the included codes (e.g. Data missing or workflow error codes). 
</p> 
<p>
Best Practice Note: Mixing definitional systems offers the potential for 
confusing, overlapping, and inconsistent definitions. Creating value sets that cross
code systems should be done with care to avoid creating definitional confusion.
</p>

<a name="csnote"></a>
<h3>Code systems Note</h3>
<p>
Each <a href="codesystem.html">Code System</a> defines which filters can be 
used in <code>ValueSet.compose.include.filter</code>. All code systems have
<a href="codesystem.html#filter">base filters</a> and any additional 
filters defined in (<a href="codesystem-definitions.html#CodeSystem.filter">CodeSystem.filter)</a>.
</p>
<p>
This specification also defines filters for various published code systems:
</p>
<ul>
 <li><a href="loinc.html#filters">LOINC Filters</a></li>
 <li><a href="snomedct.html#filters">Using CT Filters</a></li>
 <li><a href="rxnorm.html#filters">RxNorm Filters</a></li>
 <li><a href="ucum.html#filters">UCUM Filters</a></li>
 <li><a href="ncimeta.html#filters">Using Metathesaurus Filters</a></li>
 <li><a href="cpt.html#filters">CPT Filters</a></li>
 <li><a href="ndfrt.html#filters">NDF-RT Filters</a></li>
</ul>

<a name="expansion"></a>
<h2>Value Set Expansion</h2>
<p>
A value set can be "expanded", where the definition of the value set is 
used to create a simple collection of codes suitable for use for data 
entry or validation. There is a <a href="valueset-operation-expand.html">defined operation $expand</a> to ask a server to perform this expansion.
Expansions are most useful when a value set includes 
all the codes in a code system, or a set of codes by filter. 
</p>
<p>
A resource that represents a value set expansion includes the same
identification details as the definition of the value set, and MAY
include the definition of the value set (<code>.compose</code>). In 
addition, it has an <code>.expansion</code> element which contains
the list of codes that constitute the value set expansion. 
If the expansion has nested <code>contains</code> elements, there is 
no implication about the logical relationship between them, and the 
structure cannot be used for logical inferencing. The structure 
exists to provide navigational assistance for helping human users to 
locate codes in the expansion.
</p>
<p>
When a request for an expansion is received (e.g., for the <a href="valueset-operations.html#expand">$expand</a> operation),
the following process should be followed:
</p>
<ul>
 <li>If the value set already has an expansion (e.g., a stored expansion):
   <ul>
    <li>Check that the parameters associated with the $expand operation are consistent with the parameters recorded in the expansion</li>
    <li>If the parameters are inconsistent, then either generate a new composition, or, if there is no definition (<code>.compose</code>), return an error</li>
    <li>Additional parameters may be applied to an existing expansion if the server has validated that the result will be the same as if the expansion 
    was generated directly from the value set definition (e.g. text filter, designations included).</li>
   </ul>
 </li>
 <li>Otherwise: For each <i>compose.include</i>:
  <ol>
   <li>If there is a system, identify the correct version of the code system, and then:
     <ul>
      <li>If there are no codes or filters, add every code in the code system to the result set.</li>   
      <li>If codes are listed, check that they are valid, and check their active status, and if ok, add them to the result set (the parameters to the $expand operation may be used to control whether active codes are included).</li>
      <li>If any filters are present, process them in order (as explained above), and add the intersection of their results to the result set.</li>
   </ul></li>
   <li>For each <code>valueSet</code>, find the referenced value set by ValueSet.url, expand that (e.g., using the <a href="valueset-operations.html#expand">$expand</a> operation: GET [base]/ValueSet/$expand$url=[compose.include.valueSet]), and add it to the result set. This means that expansion across imports is a recursive process.</li>
   <li>Add the intersection of the result set from the system and the result sets from the value sets to the expansion</li>
  </ol>
 </li>
 <li>For each <i>compose.exclude</i>, follow the same process as for <i>compose.include</i>, but remove any codes from the result set, instead of adding them.</li>
</ul>
<p>
The final "result set" is then represented in <i>expansion</i>. Note that the expansion structure is inherently ordered, and 
also provides support for a hierarchical tree of items. This specification does not fix the meaning of use of either
the order or the hierarchy, and the conceptual approach described should not be understood to prohibit any implementation approach in
these regards. In addition, note that the method described above is a conceptual approach; individual servers may choose to follow
alternative approaches that are more efficient, as long as the outcome is the same.
</p>
<p>
An expansion may include entries in the expansion that only serve an arbitrary grouping purpose, to make it easier
for a human to use the list. These entries have no system or code, and must be marked as abstract. Note that the 
<code>CodeSystem</code> resource and <code>ValueSet.compose</code> offer no direct support for defining hierarchies and groups;
applications may want to take advantage of the <a href="extension-valueset-expand-rules.html">expand-rules</a> and 
<a href="extension-valueset-expand-group.html">expand-group</a> extensions as an implementation feature. 
</p>
<p>
The codes in the expansion should be treated as case sensitive - implementers should use the correct 
case. Implementers can consult the definition of the underlying code systems to determine whether the code system
that defines the code is case sensitive or not. 
</p>
<a name="identifiers"></a>
<h3>Expansion Identifiers</h3>
<p>
It is important that expansions be identified properly. Any value set definition may produce an infinite 
number of expansions, depending on the operation parameters. Any expansions 
produced must be clearly identified so that there is no confusion. The following rules apply:
</p>
<ul>
 <li>The canonical URL for the expansion is the same as the value set it was expanded from</li>
 <li>Each expansion SHALL have a unique identifier in <code>ValueSet.expansion.identifier</code></li>
 <li>The result of an $expand operation may use the same identifier in ValueSet.expansion.identifier as a 
   previous expansion, but if it does, the canonical representation of the value set expansion SHALL be identical (e.g. a cached response)</li>
</ul>

<a name="parameters"></a>
<h3>Expansion Parameters</h3>
<p>
The expansion contains a set of parameters in <code>ValueSet.expansion.parameter</code> that record what controlled the expansion process. 
These parameters may be used by users of expanded value sets to check whether the expansion 
is suitable for a particular purpose, or to pick the correct expansion. The server decides which 
parameters to include here, but at a minimum, the list SHOULD include all of the parameters that 
affect the $expand operation. If the expansion will be persisted all of these parameters SHALL 
be included. If the codeSystem on the server has a specified 
version then this version SHALL be provided as a parameter in the expansion (note that not all 
code systems have a version). 
</p>
<p>
The following parameters are predefined by the $expand operation, and are suitable for use in the
expansion parameters:
</p>
[%shortparameterlist ValueSet/$expand:filter,date,offset,count,includeDesignations,designation,includeDefinition,activeOnly,excludeNested,excludeNotForUI,excludePostCoordinated,displayLanguage,exclude-system,system-version,check-system-version,force-system-version%]
<p>
The count and offset parameters are important. If the expansion is a page out of
the whole expansion, the offset and count parameters SHALL be populated. Clients
can reliably use the count/offset parameters to determine whether the whole 
expansion is returned.
</p>
<p>
Other parameters that servers may be required to use:
</p>
<table class="grid">
 <tr><td><code>[canonical]#CodeSystem.content</code></td><td>[content] : The content value for the code system for the canonical URL. 
   Applications generating expansions SHALL use this parameter if the CodeSystem.content value is "fragment" or " </td></tr>
 <tr><td><code>[canonical1]#supplement</code></td><td>[canonical2] : Indicates that the specified supplement (canonical2) contributed to the content
  of the expansion for the code system canonical1 (by influencing selection, or providing designations). Applications generating expansions SHALL use this parameter to record 
	that a supplement was used durin the expansion process</td></tr>
</table>
<p>
Beyond this, servers MAY define their own parameters, though Terminology server
authors are requested to bring additional parameters to HL7 (via 'Propose a change' 
link below) in the interests of interoperability. 
</p>



<a name="storage"></a>
<h3>Storing Expansions</h3>
<p>
Whether to store expanded value sets, or simply to store their definitions and expand on the fly is 
a matter for system deployment. Some servers, including public value sets servers, only store expansions. 
However any system that stores an expansion must be concerned with how to determine whether the expansion 
is still current, and this requires deep knowledge of how the expansion was created. 
A system with a dedicated terminology server that returns expansions on demand avoids this problem, but 
leaves open the question of how to audit the specific expansion that was used for a particular case. 
One solution to this is to use a dedicated terminology server, and have the clients ask for 
expansions on demand based on the value set definitions, and for the server to store (and reuse as 
appropriate) the returned expansion (when it reuses the expansion, ValueSet.expansion.identifier will
be the same). If expansions are shared, users need to be aware of how expansion identifiers (which may be 
server specific) work.  
</p>

<h3>Searching for codes in value sets</h3>
<p>
The search parameters defined on ValueSet include the <code>code</code> parameter. This is intended
to allow a consumer to find all the value sets that include a particular code. However, fully
evaluating this search parameter is extremely onerous for a server. Further, whether a code is 
in a value set depends on the context in which expansions are performed (see the <a href="valueset-operation-expand.html">$expand</a> operation).
For this reason, the degree to which the search parameter is supported can be declared in the <a href="terminologycapabilities-definitions.html#TerminologyCapabilities.codeSearch">Terminology Capability</a>
statement. 
</p>

</div>
